use std::str::FromStr;
use super::{Name, Expression, Scalar, Value};

grammar;

pub Expression0: Expression = {
    "?" <e: Expression0> => Expression::Unseal(box Expression::Apply(box Expression::Name("solve".to_owned()), box Expression::Seal(box e))),
    "\\" <ns:Name+> "->" <e: Expression0> => Expression::_abstract(ns, e),
    "let" <n: Name> "=" <e1: Expression0> "in" <e2: Expression0> => Expression::Let(n, box e1, box e2),
    "if" <c: Expression0> "then" <t:Expression0> "else" <f:Expression0> => Expression::If(box c, box t, box f),
    Expression1,
}

pub Expression1: Expression = {
    <e1:Expression1> "|" <e2:Expression2> => Expression::Union(box e1, box e2),
    <e1:Expression1> "&" <e2:Expression2> => Expression::Intersection(box e1, box e2),
    Expression2,
}

pub Expression2: Expression = {
    <e1:Expression2> "=" <e2:Expression3> => Expression::Equals(box e1, box e2),
    Expression3,
}

pub Expression3: Expression = {
    <e1:Expression3> "x" <e2:Expression4> => Expression::Product(box e1, box e2),
    Expression4,
}

pub Expression4: Expression = {
    <f:Expression4> <arg:Expression5> => Expression::Apply(box f, box arg),
    <f:Expression4> "[" <arg:Expression0> "]" => Expression::Apply(box Expression::Apply(box Expression::Name("permute".to_owned()), box Expression::Seal(box arg)), box Expression::Seal(box f)),
    <e1:Expression4> "+" <e2:Expression5> => Expression::apply("+", vec![e1, e2]),
    Expression5,
}

pub Expression5: Expression = {
    "!" <e:Expression5> => Expression::Negation(box e),
    "$" <e:Expression5> => Expression::Unseal(box e),
    Expression6,
}

pub Expression6: Expression = {
    "nothing" => Expression::Nothing,
    "something" => Expression::Something,
    <s:Scalar> => Expression::Scalar(s),
    <n:Name> => Expression::Name(n),

    "(" <e:Expression0> ")" => e,
    "{" <e:Expression0> "}" => Expression::Seal(box e),
}

pub Name: Name = {
    <n:r"[[:alpha:]]([[:alnum:]]|[-_\?!])*"> => n.to_owned(),
}

pub Scalar: Scalar = {
    <s:r#""(\\.|[^"])*""#> => Scalar::String(unescape::unescape(&s[1..(s.len()-1)]).unwrap()),
    <n:r"[0-9]+"> => Scalar::Number(i64::from_str(n).unwrap()),
}
