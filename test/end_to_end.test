42
---
type:
number
value:
| 42

3.14, 4.5
---
type:
number, number
value:
| 3.14, 4.5

"foo"
---
type:
text
value:
| "foo"

// TODO print escapes properly
"foo\"bar"
---
type:
text
value:
| "foo"bar"

// TODO expand boxes
1 @
---
type:
@(d0)
value:
| @(d0)

a: 1;
a
---
type:
number
value:
| 1

// TODO expand boxes
a: 1 @;
a
---
type:
@(d0)
value:
| @(d0)

foo: ?a a;
foo 1
---
type:
number
value:
| 1

foo: ?a ?b a,b;
foo 1 2
---
type:
number, number
value:
| 1, 2

1, 2, 3, 4 4
---
type:
number, number, number
value:
| 1, 2, 3

(1, 2, 3, 4) 4
---
type:
number, number, number
value:
none

1, 2, 3, 4 1
---
type:
number, number, number
value:
none

(1, 2, 3, 4) 1
---
type:
number, number, number
value:
| 2, 3, 4

1, 2 | 3, 4
---
type:
number, number
value:
| 1, 2
| 3, 4

1, (2 | 3), 4
---
type:
number, number, number
value:
| 1, 2, 4
| 1, 3, 4

a:
, 1
, 2
, 3;
a
---
type:
number, number, number
value:
| 1, 2, 3

a:
  | 1, 2, 3
  | 4, 5, 6;
a
---
type:
number, number, number
value:
| 1, 2, 3
| 4, 5, 6

f: ?a ?b a + b;
f f
---
AnalyzeError: Cannot apply two maybe-infinite sets

// TODO this is a result of the hacky way that preceding operators are handled
a: |,&|,& 1;
a
---
type:
number
value:
| 1

1 + 2 * 3
---
ParseError: Ambiguous precedence for `+` vs `*`

(1 + 2) * 3
---
type:
number
value:
| 9

3 * 2 + 1
---
ParseError: Ambiguous precedence for `*` vs `+`

3 * (2 + 1)
---
type:
number
value:
| 9

// parses as 1, (2 3)
1, 2 3
---
type:
number
value:
none

// parses as 1, (2 2)
1, 2 2
---
type:
number
value:
| 1

a & b | c
---
ParseError: Ambiguous precedence for `&` vs `|`

a * b / c
---
ParseError: Ambiguous precedence for `*` vs `/`

1 + 2 | 5
---
type:
number
value:
| 3
| 5

?a ?@b (a | b), c
---
DesugarError: Name not in scope: c

1, "foo" | 2
---
type:
number | number, text
value:
| 2
| 1, "foo"

1 1 !
---
type:
maybe
value:
none

1 2 !
---
type:
maybe
value:
some

foo: 1, 1, 1;
foo 1 1 1 !
---
type:
maybe
value:
none

foo: 1, 1, 1;
foo 2 1 1 !
---
type:
maybe
value:
some

some then 1,2
---
type:
number, number
value:
| 1, 2

none then 1,2
---
type:
number, number
value:
none

a: 1, "foo";
a, a
---
type:
number, text, number, text
value:
| 1, "foo", 1, "foo"

foo: ?a ?b a=b;
foo 1 1
---
type:
maybe
value:
some

foo: ?a ?b a=b;
foo 1 2
---
type:
maybe
value:
none

foo: ?a ((?b a,b)@);
foo 1 ?@bar bar 2
---
type:
number, number
value:
| 1, 2

foo1: ?a ((?b a,b)@);
foo2: ?a ((?b a,b)@);
bar: foo1 1 | foo2 2;
bar ?@f f 3
---
type:
number, number
value:
| 1, 3
| 2, 3

foo: 1, 1 | 2, 2;
foo foo
---
type:
maybe
value:
some

foo: ?a ?b a,b;
foo foo
---
AnalyzeError: Cannot apply two maybe-infinite sets

foo: ?a ?b a,b;
foo = 1
---
AnalyzeError: Could not infer the type of abstract arg

foo: ?a ?b a,b;
(foo | foo) 1 2
---
type:
number, number
value:
| 1, 2

(?a none) then 1
---
AnalyzeError: Could not infer the type of abstract arg

foo: ?a ?b a=b;
(foo, 1, 2) 0 0 1 2
---
type:
maybe
value:
some

foo: ?a ?b a=b;
(foo, 1, 2) 0 1 1 2
---
type:
maybe
value:
none

3: 4; 5
---
ParseError: Expected name or scalar, found whitespace

fix 1 ?@prev prev 10 then 10 else prev + 1
---
type:
number
value:
| 10

fix 1 ?@prev prev 5 then prev else prev | prev ?a a+1
---
type:
number
value:
| 1
| 2
| 3
| 4
| 5

range: ?lo ?hi fix lo ?@prev prev hi then prev else prev | prev ?a a+1;
range 2 5
---
type:
number
value:
| 2
| 3
| 4
| 5

edge: 1, 2 | 2, 3 | 3, 4 | 3, 1;
fix edge ?@reach reach | reach ?a ?b a, edge b
---
type:
number, number
value:
| 1, 1
| 1, 2
| 1, 3
| 1, 4
| 2, 1
| 2, 2
| 2, 3
| 2, 4
| 3, 1
| 3, 2
| 3, 3
| 3, 4

edge: 1, 2 | 2, 3 | 3, 4 | 3, 1;
node: edge ?a ?b a | b;
node ?a a, fix a ?@reach reach | reach ?a edge a
---
type:
number, number
value:
| 1, 1
| 1, 2
| 1, 3
| 1, 4
| 2, 1
| 2, 2
| 2, 3
| 2, 4
| 3, 1
| 3, 2
| 3, 3
| 3, 4
| 4, 4

closure:
  ?@edge
    fix edge ?@reach
      reach | reach ?a ?b a, edge b;
1, 2 | 2, 3 | 3, 4 | 3, 1 @ closure
---
type:
number, number
value:
| 1, 1
| 1, 2
| 1, 3
| 1, 4
| 2, 1
| 2, 2
| 2, 3
| 2, 4
| 3, 1
| 3, 2
| 3, 3
| 3, 4

fix 1 2
---
AnalyzeError: The `next` argument for fix must take a box as it's first argument. Found number

fix 1 ?@prev prev,2
---
AnalyzeError: Type of fix failed to converge, reached number, number, number, number, number, number, number, number, number, number, number | number | number, number, number, number, number, number | number, number, number, number, number, number, number | number, number, number, number, number, number, number, number, number, number | number, number | number, number, number, number, number, number, number, number, number | number, number, number, number, number, number, number, number | number, number, number, number, number | number, number, number | number, number, number, number

range (0 - 3) 3
---
type:
number
value:
| -3
| -2
| -1
| 0
| 1
| 2
| 3

range 3 2
---
type:
number
value:
none

range 0.5 1.5
---
NativeError: Inputs to `range` must be whole numbers, found `range 0.5 1.5`

enumerate ("c", 0 | "a", 0 | "b", 1 | "b", 0.1)
---
type:
number, text, number
value:
| 1, "a", 0
| 2, "b", 0.1
| 3, "b", 1
| 4, "c", 0

enumerate ("c", 0 | "a", 0 | "b", 1 | "b", 0.1) (range 2 3)
---
type:
text, number
value:
| "b", 0.1
| "b", 1

reduce (3 | 4 | 5) 0 ?@prev ?@i prev + i
---
type:
number
value:
| 12

reduce (3 | 4 | 5) 0 ?a ?b a + b
---
AnalyzeError: Result of apply is always empty

// testing specialization caching
f: ?i i+1;
(f 1), (f 2), (f 3 4), (f 5 6)
---
type:
number, number
value:
| 2, 3

collatz:
  ?n
    fix n ?@n
      (n = 1)
      then 1
      else
        ((n % 2) 0)
          then n / 2
        else (3 * n) + 1;
collatz 42
---
type:
number
value:
| 1

foo: 1, "a" | 2, "b";
foo ~
---
type:
text, number
value:
| "a", 1
| "b", 2

foo: "a" | "b" | "z";
bar: "a", "z", 0 | "b", "q", 0;
foo bar ~
---
type:
number, text
value:
| 0, "q"
| 0, "z"

foo: "a" | "b" | "z";
bar: "a", "z" | "b", "q";
foo bar~
---
type:
text
value:
| "a"

(1 | 2 | 3) . ?a a+1
---
type:
number, number
value:
| 1, 2
| 2, 3
| 3, 4

(1 | 2 | 3) . (?a a>1)
---
type:
number
value:
| 2
| 3

(1 | 2 | 3) (?a a-1) . (?a a>1)
---
type:
number
value:
| 2

max:
  ?@things
      reduce things (enumerate things 1) ?@prev ?@i prev > i then prev else i;
(0 & 1) @ max
---
type:
number
value:
none

max:
  ?@things
      reduce things (enumerate things 1) ?@prev ?@i prev > i then prev else i;
1 @ max
---
type:
number
value:
| 1

fix none ?@prev 1
---
type:
number
value:
| 1

fix none ?@prev none
---
type:
none
value:
none

(?@a ?@b a b) (1,2 @) (1 @)
---
type:
number
value:
| 2

(?@a ?@b a b) (1,2)@ 1@
---
type:
number
value:
| 2

fix a: 1;
a
---
type:
number
value:
| 1

fix a: a! then 1 else a >= 10 then a else a+1;
a
---
type:
number
value:
| 10

// sloppy mode allows ending with a def
a: 1 + 1
---
type:
number
value:
| 2

// sloppy mode allows ending with a def
a: 1 + 1;
---
type:
number
value:
| 2

// sloppy mode allows ending without closing parens
a: (1 + 1
---
type:
number
value:
| 2

// with tmp as
//    select timestamp - lag(timestamp) as diff
//    partition by category
//    order by timestamp
//    from metrics
// select mean(diff)
// from tmp
// group by category
mean: ?@things (reduce things 0 ?@prev ?@thing prev + (thing (?a ?b b))) / (reduce things 0 ?@prev ?@thing prev + 1);
group: (0 | 1), "foo" | (2 | 3), "bar";
timestamp: 0, 4 | 1, 12 | 2, 15 | 3, 3;
group ?id ?g g,
  sorted_timestamps: enumerate (g group~ ?id id timestamp, id);
  timestamp_diffs:
    sorted_timestamps ?i ?t1 ?id
    sorted_timestamps (i - 1) ?t2 ?id
    i, t1 - t2;
  timestamp_diffs @ mean
// TODO with inferred domains
// ?g
//   group _ g then
//   sorted_timestamps: enumerate (?t ?id timestamp id t, group id g);
//   timestamp_diffs: ?i (?t1 sorted_timestamps i t1 _) - (?t2 sorted_timestamps (i - 1) t2 _);
//   timestamp_diffs @ mean
//
// RAI version
//def group = {(0, "foo"); (1, "foo"); (2, "bar"); (3, "bar")}
//def timestamp = {(0, 4); (1, 12); (2, 15); (3, 3)}
//def sorted_groups = g: sort[{t, id: timestamp(id, t), group(id, g)}]
//def diffs = g, i: {t1 - t2 from t1, t2 where sorted_groups(g,i,t1,_) and sorted_groups(g,i-1,t2,_)}
//def result = g: mean[diffs[g]]
---
type:
text, number
value:
| "bar", 12
| "foo", 8

edits: range 0 8;
root: 0;
parent:
  | 1, 0
  | 2, 0
  | 3, 1
  | 4, 1
  | 5, 2
  | 6, 5
  | 7, 5
  | 8, 5;
character:
  | 0, "a"
  | 1, "b"
  | 2, "e"
  | 3, "c"
  | 4, "d"
  | 5, "f"
  | 6, "g"
  | 7, "h"
  | 8, "i";
max: ?@things reduce things (enumerate things 1) ?@prev ?@i prev > i then prev else i;
rightmost_child: edits.?edit edit parent~ @ max;
// TODO swapping child and leaf shouldn't matter, but causes test to spin forever
fix rightmost_leaf: edits.?edit edit | edit rightmost_child rightmost_leaf @ max;
prev_sibling: edits.?edit edit parent parent~ .(?sibling edit > sibling) @ max;
prev: edits.?edit edit prev_sibling !! then edit prev_sibling rightmost_leaf else edit parent;
fix position: root, 0 | position ?edit ?pos edit prev~, pos + 1;
edits ?edit (edit position), edit, (edit character)
//
// RAI version
//def rightmost_child[p] =
//  Max[{c from c where parent(c, p)}]
//
//def rightmost_leaf[p in edit] =
//  Max[p; rightmost_leaf[rightmost_child[p]]]
//
//def prev_sibling[a] =
//  Max[{b from b,p where parent(a,p) and parent(b,p) and a > b}]
//
//def prev[a] =
//  if exists prev_sibling[a]
//  then rightmost_leaf[prev_sibling[a]]
//  else parent[a]
//  end
//
//def position[a in edit] =
//  if not exists parent[a] then 0 else
//  position[prev[a]] + 1
//  end
//
//def output[p, a] = position(a, p), character[a]
---
type:
number, number, text
value:
| 0, 0, "a"
| 1, 1, "b"
| 2, 3, "c"
| 3, 4, "d"
| 4, 2, "e"
| 5, 5, "f"
| 6, 6, "g"
| 7, 7, "h"
| 8, 8, "i"

edits: range 0 8;
root: 0;
parent:
  | 1, 0
  | 2, 0
  | 3, 1
  | 4, 1
  | 5, 2
  | 6, 5
  | 7, 5
  | 8, 5;
character:
  | 0, "a"
  | 1, "b"
  | 2, "e"
  | 3, "c"
  | 4, "d"
  | 5, "f"
  | 6, "g"
  | 7, "h"
  | 8, "i";
max: ?@things reduce things (enumerate things 1) ?@prev ?@i prev > i then prev else i;
min: ?@things reduce things (enumerate things 1) ?@prev ?@i i > prev then prev else i;
// functions for working with 'arrays'
insert: ?@sequence ?position ?item
    | (sequence ?old_position ?old_item
        , (old_position >= position then old_position + 1 else old_position)
        , old_item)
    | (position, item);
find_min_pos: ?@sequence ?@cond
    found: sequence ?pos ?edit cond pos edit then pos;
    found @ min;
// actual crdt code
sequence:
  fix (0, root) ?@sequence
    next_edit: 1 + ((sequence (?pos ?edit edit)) @ max);
    edits next_edit ! then sequence else
    parent_pos: find_min_pos sequence@ (?pos ?edit next_edit parent edit)@;
    insertion_point: find_min_pos sequence@ (?o_pos ?o_edit
      o_parent_pos: find_min_pos sequence@ (?pos ?edit o_edit parent edit)@;
      (o_pos > parent_pos) & (parent_pos > o_parent_pos))@;
    insert
      sequence@
      (insertion_point!! then insertion_point else (sequence (?pos ?edit pos) @ max) + 1)
      next_edit;
sequence ?pos ?edit pos, edit, (edit character)
---
type:
number, number, text
value:
| 0, 0, "a"
| 1, 1, "b"
| 2, 3, "c"
| 3, 4, "d"
| 4, 2, "e"
| 5, 5, "f"
| 6, 6, "g"
| 7, 7, "h"
| 8, 8, "i"

foo: "bar", "boo", 0, 1;
trades: fix foo ?@trades
  foo ?a ?b ?c ?d
  a, b, c, (foo a b c @ ?@s s);
trades
---
type:
text, text, number, number
value:
| "bar", "boo", 0, 1

max: ?@xs reduce xs (enumerate xs 1) ?@a ?@b a > b then a else b;
min: ?@xs reduce xs (enumerate xs 1) ?@a ?@b a > b then b else a;
sum: ?@xs reduce xs 0 ?@a ?@b a + b;
book: 
| "amazon", (
    | "buy", 7, 8
    | "sell", 9, 1
)
| "google", (
    | "buy", (2, 5 | 6, 7)
    | "sell", (7, 5 | 11, 9)
);
stonks: book (?s ?a_ ?b_ ?c_ s);
stonks ?buy_stonk
stonks ?sell_stonk
buy_stonk sell_stonk ! then
fix trades:
  buy_book: book buy_stonk "buy" ?px ?qx
    qx: qx - ((trades ?buy_px ?sell_px ?qx buy_px px then qx) @ sum);
    qx > 0 then px, qx;
  sell_book: book sell_stonk "sell" ?px ?qx
    qx: qx - ((trades ?buy_px ?sell_px ?qx sell_px px then qx) @ sum);
    qx > 0 then px, qx;
  buy_px: buy_book (?px ?qx px) @ max;
  sell_px: sell_book (?px ?qx px) @ min;
  qx: (buy_book buy_px | sell_book sell_px) @ min;
  | trades
  | buy_px, sell_px, qx;
buy_stonk, sell_stonk, trades
---
type:
text, text, number, number, number
value:
| "amazon", "google", 7, 7, 5
| "amazon", "google", 7, 11, 3
| "google", "amazon", 6, 9, 1

("foo", 1 | 2, "bar") "foo"
---
type:
number
value:
| 1

((?a ?b a + b) | (1, 2, 42)) 1 2
---
type:
number
value:
| 3
| 42

:foo
---
type:
:"foo"
value:
| "foo"

| :foo, (1,2|3,4)
| :bar, "quux"
---
type:
:"bar", text | :"foo", number, number
value:
| "bar", "quux"
| "foo", 1, 2
| "foo", 3, 4

db:
| :foo, (1,2|3,4)
| :bar, "quux";
db :foo
---
type:
number, number
value:
| 1, 2
| 3, 4

// TODO need to figure out how to handle branches like this
f: ?a
| a :text
| (a :number) + 1;
f (:number, 2)
---
AnalyzeError: Result of apply is always empty

// TODO need to figure out how to handle branches like this
f: ?a
| a :text !! then a :text
| a :number !! then (a :number) + 1;
f (:number, 2)
---
AnalyzeError: Result of apply is always empty