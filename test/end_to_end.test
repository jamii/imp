42
---
type: number
value: 42

3.14 , 4.5
---
type: number , number
value: 3.14 , 4.5

"foo"
---
type: text
value: "foo"

// TODO print escapes properly
"foo\"bar"
---
type: text
value: "foo"bar"

// TODO expand boxes
[1]
---
type: [(type of expr #0 with scope ())]
value: [(value of expr #0 with scope ())]

let a = 1 in
a
---
type: number
value: 1

// TODO expand boxes
let a = [1] in
a
---
type: [(type of expr #0 with scope ())]
value: [(value of expr #0 with scope ())]

let foo = ?a a in
foo 1
---
type: number
value: 1

let foo = ?a ?b a,b in
foo 1 2
---
type: number , number
value: 1 , 2

1 , 2 , 3 , 4 4
---
type: number , number , number
value: 1 , 2 , 3

(1 , 2 , 3 , 4) 4
---
type: number , number , number
value: none

1 , 2 , 3 , 4 1
---
type: number , number , number
value: none

(1 , 2 , 3 , 4) 1
---
type: number , number , number
value: 2 , 3 , 4

1 , 2 | 3 , 4
---
type: number , number
value: 1 , 2 | 3 , 4

1 , (2 | 3) , 4
---
type: number , number , number
value: 1 , 2 , 4 | 1 , 3 , 4

(1, 2, 3,) |
(4, 5, 6,) |
---
type: number , number , number
value: 1 , 2 , 3 | 4 , 5 , 6

1 + 2 * 3
---
Parse error: Ambiguous precedence for `+` vs `*`

(1 + 2) * 3
---
type: number
value: 9

3 * 2 + 1
---
Parse error: Ambiguous precedence for `*` vs `+`

3 * (2 + 1)
---
type: number
value: 9

// parses as 1 , (2 3)
1 , 2 3
---
type: number
value: none

// parses as 1 , (2 2)
1 , 2 2
---
type: number
value: 1

a & b | c
---
Parse error: Ambiguous precedence for `&` vs `|`

a * b / c
---
Parse error: Ambiguous precedence for `*` vs `/`

1 + 2 | 5
---
type: number
value: 3 | 5

?a ?[b] (a | b) , c
---
Desugar error: Name not in scope: c

1 , "foo" | 2
---
Analyze error: Mismatched arities: 2 vs 1

!(1 1)
---
type: maybe
value: none

!(1 2)
---
type: maybe
value: some

when some 1,2
---
type: number , number
value: 1 , 2

when none 1,2
---
type: number , number
value: none

let a = 1 , "foo" in
a , a
---
type: number , text , number , text
value: 1 , "foo" , 1 , "foo"

let foo = ?a ?b a=b in
foo 1 1
---
type: maybe
value: some

let foo = ?a ?b a=b in
foo 1 2
---
type: maybe
value: none

let foo = ?a [?b a,b] in
foo 1 ?[bar] bar 2
---
type: number , number
value: 1 , 2

let foo1 = ?a [?b a,b] in
let foo2 = ?a [?b a,b] in
let bar = foo1 1 | foo2 2 in
bar ?[f] f 3
---
Analyze error: TODO type unions are not implemented yet: [(type of expr #3 with scope (number))] | [(type of expr #10 with scope ([(type of expr #5 with scope ())] , number))]

let foo = 1 , 1 | 2 , 2 in
foo foo
---
type: maybe
value: some

let foo = ?a ?b a,b in
foo foo
---
Analyze error: Cannot apply two maybe-infinite sets: (type of expr #4 with scope ()) applied to (type of expr #4 with scope ())

let foo = ?a ?b a,b in
foo = 1
---
Analyze error: Cannot equal one or more maybe-infinite sets: (type of expr #4 with scope ()) = number

let foo = ?a ?b a,b in
(foo | foo) 1 2
---
type: number , number
value: 1 , 2

when (?a none) 1
---
Analyze error: The condition of `when` must have type `maybe`, found (type of expr #1 with scope ())

let foo = ?a ?b a=b in
(foo , 1 , 2) 0 0 1 2
---
type: maybe
value: some

let foo = ?a ?b a=b in
(foo , 1 , 2) 0 1 1 2
---
type: maybe
value: none

let 3 = 4 in 5
---
Parse error: Expected name, found number `3`

fix 1 ?[prev] if (prev 10) 10 else prev + 1
---
type: number
value: 10

fix 1 ?[prev] if (prev 5) prev else prev | prev ?a a+1
---
type: number
value: 1 | 2 | 3 | 4 | 5

let range =
  ?lo ?hi
    fix lo ?[prev]
      if (prev hi)
        prev
      else
        prev | prev ?a a+1 in
range 2 5
---
type: number
value: 2 | 3 | 4 | 5

let edge = 1 , 2 | 2 , 3 | 3 , 4 | 3 , 1 in
fix edge ?[reach] reach | reach ?a ?b a , edge b
---
type: number , number
value: 1 , 1 | 1 , 2 | 1 , 3 | 1 , 4 | 2 , 1 | 2 , 2 | 2 , 3 | 2 , 4 | 3 , 1 | 3 , 2 | 3 , 3 | 3 , 4

let edge = 1 , 2 | 2 , 3 | 3 , 4 | 3 , 1 in
let node = edge ?a ?b a | b in
node ?a a , fix a ?[reach] reach | reach ?a edge a
---
type: number , number
value: 1 , 1 | 1 , 2 | 1 , 3 | 1 , 4 | 2 , 1 | 2 , 2 | 2 , 3 | 2 , 4 | 3 , 1 | 3 , 2 | 3 , 3 | 3 , 4 | 4 , 4

let closure =
  ?[edge]
    fix edge ?[reach]
      reach | reach ?a ?b a , edge b in
closure [1 , 2 | 2 , 3 | 3 , 4 | 3 , 1]
---
type: number , number
value: 1 , 1 | 1 , 2 | 1 , 3 | 1 , 4 | 2 , 1 | 2 , 2 | 2 , 3 | 2 , 4 | 3 , 1 | 3 , 2 | 3 , 3 | 3 , 4

fix 1 2
---
Analyze error: The `next` argument for fix must be able to be applied to it's own result, found number

fix 1 ?[prev] prev,2
---
Analyze error: The `next` argument for fix must have constant arity, changed from 1 to 2

range (0 - 3) 3
---
type: number
value: -3 | -2 | -1 | 0 | 1 | 2 | 3

range 3 2
---
type: number
value: none

range 0.5 1.5
---
Native error: Inputs to `range` must be whole numbers, found `range 0.5 1.5`

enumerate ("c" , 0 | "a" , 0 | "b" , 1 | "b" , 0.1)
---
type: number , text , number
value: 1 , "a" , 0 | 2 , "b" , 0.1 | 3 , "b" , 1 | 4 , "c" , 0

enumerate ("c" , 0 | "a" , 0 | "b" , 1 | "b" , 0.1) (range 2 3)
---
type: text , number
value: "b" , 0.1 | "b" , 1

reduce (3 | 4 | 5) 0 ?[prev] ?[i] prev + i
---
type: number
value: 12

// TODO
// reduce (none :: number) 0 ?[prev] ?[i] prev + i
reduce ((1 , 2) 3) 0 ?[prev] ?[i] prev + i
---
type: number
value: 0

reduce (3 | 4 | 5) 0 ?a ?b a + b
---
Analyze error: Intersection of number and [(type of expr #13 with scope ())] is empty

// testing specialization caching
let f = ?i i+1 in
(f 1) , (f 2) , (f 3 4) , (f 5 6)
---
type: number , number
value: 2 , 3

let collatz =
  ?n
    fix n ?[n]
      if (n = 1)
        1
      else
        if ((n % 2) 0)
          n / 2
        else
          (3 * n) + 1 in
collatz 42
---
type: number
value: 1

let foo = 1 , "a" | 2 , "b" in
~foo
---
type: text , number
value: "a" , 1 | "b" , 2

(1 | 2 | 3) . ?a a+1
---
type: number , number
value: 1 , 2 | 2 , 3 | 3 , 4

(1 | 2 | 3) . (?a a>1)
---
type: number
value: 2 | 3

(1 | 2 | 3) (?a a-1) . (?a a>1)
---
type: number
value: 2

let edits = range 0 8 in
let root =
  0 in
let parent =
  1 , 0 |
  2 , 0 |
  3 , 1 |
  4 , 1 |
  5 , 2 |
  6 , 5 |
  7 , 5 |
  8 , 5 | in
let character =
  0 , "a" |
  1 , "b" |
  2 , "e" |
  3 , "c" |
  4 , "d" |
  5 , "f" |
  6 , "g" |
  7 , "h" |
  8 , "i" | in
// TODO this is a workaround for bad arity tracking in the interpreter
let none1 = 1 & 0 in
let none2 = none1, none1 in
// TODO need a version of reduce that doesn't return output on empty input
let max =
  ?[things]
    if !!things
      reduce things (enumerate things 0) ?[prev] ?[i] if (prev > i) prev else i
    else
      none1 in
let min =
  ?[things]
    if !!things
      reduce things (enumerate things 0) ?[prev] ?[i] if (i > prev) prev else i
    else
      none1 in
let rightmost_child =
  edits . ?edit [edit (~parent)] max in
let rightmost_leaf =
  fix
    none2
    ?[rightmost_leaf]
      edits . ?edit
        // TODO swapping child and leaf shouldn't matter, but causes test to spin forever
        [edit | edit rightmost_child rightmost_leaf] max in
let prev_sibling =
  edits . ?edit
    [edit parent (parent~) . ?sibling edit > sibling] max in
let prev =
  edits . ?edit
    if (!! (edit prev_sibling))
      edit prev_sibling rightmost_leaf
    else
      edit parent in
let position =
  fix (root , 0) ?[position]
    position |
    position ?edit ?pos edit (~prev) , pos + 1 in
edits ?edit
  (edit position) , edit , (edit character)
---
type: number , number , text
value: 0 , 0 , "a" | 1 , 1 , "b" | 2 , 3 , "c" | 3 , 4 , "d" | 4 , 2 , "e" | 5 , 5 , "f" | 6 , 6 , "g" | 7 , 7 , "h" | 8 , 8 , "i"